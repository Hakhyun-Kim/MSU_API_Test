name: Auto Release

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'screenshots/**'
      - 'LICENSE'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  
  # Schedule weekly releases (every Sunday at midnight)
  schedule:
    - cron: '0 0 * * 0'

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check if release needed
      id: check
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Check if there are new commits since last tag
        COMMITS_SINCE_TAG=$(git rev-list $LATEST_TAG..HEAD --count 2>/dev/null || echo "999")
        echo "Commits since last tag: $COMMITS_SINCE_TAG"
        
        if [ "$COMMITS_SINCE_TAG" -gt "0" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Determine version bump
      id: version
      if: steps.check.outputs.should_release == 'true'
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        VERSION=${LATEST_TAG#v}
        
        # Parse current version
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Determine bump type
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          BUMP_TYPE="${{ github.event.inputs.release_type }}"
        else
          # Auto-detect bump type from commit messages
          COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -qiE "breaking change|major"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -qiE "feat|feature|add"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
        fi
        
        # Increment version
        case $BUMP_TYPE in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
        esac
        
        echo "New version: v$NEW_VERSION"
        echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT

  create-release:
    needs: check-and-release
    if: needs.check-and-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate release notes
      id: notes
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        NEW_VERSION="${{ needs.check-and-release.outputs.new_version }}"
        
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$LATEST_TAG" ]; then
          # Get commit messages since last tag
          git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
        else
          echo "- Initial release ðŸŽ‰" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Download the appropriate version for your platform from the assets below." >> release_notes.md
        
        # Output for next step
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create tag
      run: |
        NEW_VERSION="${{ needs.check-and-release.outputs.new_version }}"
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-and-release.outputs.new_version }}
        release_name: Release ${{ needs.check-and-release.outputs.new_version }}
        body: ${{ steps.notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
    
    - name: Trigger build workflow
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'build-release.yml',
            ref: '${{ needs.check-and-release.outputs.new_version }}'
          }) 