name: Upload Artifacts to Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.2)'
        required: true
        type: string
      workflow_run_id:
        description: 'Workflow run ID with artifacts (optional)'
        required: false
        type: string

jobs:
  upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Get release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ github.event.inputs.release_tag }}'
            });
            
            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
            console.log(`Found release: ${release.data.tag_name}`);
          } catch (error) {
            core.setFailed(`Release not found: ${{ github.event.inputs.release_tag }}`);
          }
    
    - name: Download artifacts from specific run
      if: github.event.inputs.workflow_run_id != ''
      uses: actions/download-artifact@v4
      with:
        run-id: ${{ github.event.inputs.workflow_run_id }}
        path: ./artifacts
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download artifacts from latest build
      if: github.event.inputs.workflow_run_id == ''
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-release.yml
        workflow_conclusion: success
        path: ./artifacts
    
    - name: List artifacts
      run: |
        echo "Downloaded artifacts:"
        find ./artifacts -type f -ls
    
    - name: Upload to release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const uploadUrl = '${{ steps.get_release.outputs.upload_url }}';
          
          // Find executables
          const findExecutable = (artifactName) => {
            const basePath = './artifacts';
            const possiblePaths = [
              `${basePath}/${artifactName}/MSU_API_Test.exe`,
              `${basePath}/${artifactName}/MSU_API_Test`,
              `${basePath}/MSU_API_Test-Windows.exe/MSU_API_Test.exe`,
              `${basePath}/MSU_API_Test-macOS/MSU_API_Test`,
              `${basePath}/MSU_API_Test-Linux/MSU_API_Test`
            ];
            
            for (const p of possiblePaths) {
              if (fs.existsSync(p)) return p;
            }
            return null;
          };
          
          const assets = [
            {
              artifactName: 'MSU_API_Test-Windows.exe',
              fileName: 'MSU_API_Test-Windows.exe',
              contentType: 'application/octet-stream'
            },
            {
              artifactName: 'MSU_API_Test-macOS',
              fileName: 'MSU_API_Test-macOS',
              contentType: 'application/octet-stream'
            },
            {
              artifactName: 'MSU_API_Test-Linux',
              fileName: 'MSU_API_Test-Linux',
              contentType: 'application/octet-stream'
            }
          ];
          
          for (const asset of assets) {
            const filePath = findExecutable(asset.artifactName);
            
            if (filePath) {
              console.log(`Uploading ${asset.fileName} from ${filePath}...`);
              const data = fs.readFileSync(filePath);
              
              try {
                await github.rest.repos.uploadReleaseAsset({
                  url: uploadUrl,
                  name: asset.fileName,
                  data: data,
                  headers: {
                    'content-type': asset.contentType,
                    'content-length': data.length
                  }
                });
                console.log(`✓ Uploaded ${asset.fileName}`);
              } catch (error) {
                if (error.status === 422 && error.message.includes('already_exists')) {
                  console.log(`⚠ ${asset.fileName} already exists in release`);
                } else {
                  console.error(`❌ Failed to upload ${asset.fileName}:`, error.message);
                }
              }
            } else {
              console.log(`⚠ ${asset.artifactName} not found`);
            }
          }
          
          console.log('\n✅ Upload complete!');
          console.log(`View release: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${{ github.event.inputs.release_tag }}`); 