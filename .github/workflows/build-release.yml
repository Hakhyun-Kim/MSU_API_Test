name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  repository_dispatch:
    types: [build-release]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: MSU_API_Test-Windows
            build_command: pyinstaller MSU_API_Test.spec
          - os: macos-latest
            artifact_name: MSU_API_Test-macOS
            build_command: pyinstaller MSU_API_Test.spec
          - os: ubuntu-latest
            artifact_name: MSU_API_Test-Linux
            build_command: pyinstaller MSU_API_Test.spec

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1 \
          libegl1 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxcb-shape0 \
          libxcb-sync1 \
          libxcb-xkb1 \
          libxkbcommon0 \
          libfontconfig1 \
          libdbus-1-3 \
          libxi6 \
          libxext6 \
          libsm6 \
          x11-utils \
          libopengl0 \
          libxcb-cursor0 \
          xvfb
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      run: ${{ matrix.build_command }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Get latest release
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          // Try to get the latest release
          try {
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.data.length > 0) {
              const release = releases.data[0];
              core.setOutput('upload_url', release.upload_url);
              core.setOutput('release_id', release.id);
              console.log(`Found release: ${release.tag_name}`);
              return;
            }
          } catch (error) {
            console.log('No releases found, will create one if on tag');
          }
          
          core.setOutput('upload_url', '');
          core.setOutput('release_id', '');
          
    - name: Upload Release Assets
      if: steps.get_release.outputs.upload_url != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get the release upload URL
          const uploadUrl = '${{ steps.get_release.outputs.upload_url }}';
          
          // Define assets to upload
          const assets = [
            {
              path: './artifacts/MSU_API_Test-Windows.exe/MSU_API_Test.exe',
              name: 'MSU_API_Test-Windows.exe',
              contentType: 'application/octet-stream'
            },
            {
              path: './artifacts/MSU_API_Test-macOS/MSU_API_Test',
              name: 'MSU_API_Test-macOS',
              contentType: 'application/octet-stream'
            },
            {
              path: './artifacts/MSU_API_Test-Linux/MSU_API_Test',
              name: 'MSU_API_Test-Linux',
              contentType: 'application/octet-stream'
            }
          ];
          
          // Upload each asset
          for (const asset of assets) {
            if (fs.existsSync(asset.path)) {
              console.log(`Uploading ${asset.name}...`);
              const data = fs.readFileSync(asset.path);
              
              try {
                await github.rest.repos.uploadReleaseAsset({
                  url: uploadUrl,
                  name: asset.name,
                  data: data,
                  headers: {
                    'content-type': asset.contentType,
                    'content-length': data.length
                  }
                });
                console.log(`✓ Uploaded ${asset.name}`);
              } catch (error) {
                console.error(`Failed to upload ${asset.name}:`, error.message);
              }
            } else {
              console.log(`⚠ File not found: ${asset.path}`);
            }
          } 